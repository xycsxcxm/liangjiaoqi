<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>相机角度测量仪 - 增强版</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --success: #4cc9f0;
            --warning: #ffaa00;
            --danger: #f72585;
            --dark: #1d3557;
            --light: #f8f9fa;
            --gray: #6c757d;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1d3557 0%, #457b9d 100%);
            color: white;
            height: 100vh;
            overflow: hidden;
            position: relative;
        }
        
        .container {
            max-width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            padding: 15px;
            gap: 15px;
        }
        
        header {
            text-align: center;
            padding: 20px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 20px;
            margin-bottom: 5px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            position: relative;
        }
        
        h1 {
            font-size: 1.8rem;
            margin-bottom: 10px;
            background: linear-gradient(to right, #4cc9f0, #90e0ef);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .status-bar {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            font-size: 0.9rem;
            color: #a8dadc;
        }
        
        .app-container {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
            gap: 15px;
        }
        
        .camera-section {
            flex-grow: 1;
            position: relative;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.4);
            background: #000;
        }
        
        #cameraPreview {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
            transform: scaleX(-1); /* 镜像翻转，使画面更自然 */
        }
        
        #overlayCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10;
        }
        
        .camera-placeholder {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(26, 42, 108, 0.7);
            color: white;
            padding: 20px;
            text-align: center;
            z-index: 5;
        }
        
        .camera-placeholder i {
            font-size: 4rem;
            margin-bottom: 20px;
            color: #ffaa00;
        }
        
        .camera-placeholder h2 {
            font-size: 1.5rem;
            margin-bottom: 15px;
        }
        
        .controls {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
        }
        
        button {
            padding: 16px 10px;
            border: none;
            border-radius: 15px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            background: rgba(255, 255, 255, 0.15);
            color: white;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }
        
        button i {
            font-size: 1.4rem;
        }
        
        button:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-3px);
        }
        
        button:active {
            transform: translateY(1px);
        }
        
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        #measureBtn {
            background: linear-gradient(45deg, #4cc9f0, #4895ef);
        }
        
        #clearBtn {
            background: linear-gradient(45deg, #f72585, #b5179e);
        }
        
        #flipBtn {
            background: linear-gradient(45deg, #7209b7, #560bad);
        }
        
        .result-panel {
            background: rgba(0, 0, 0, 0.5);
            border-radius: 20px;
            padding: 20px;
            text-align: center;
            backdrop-filter: blur(10px);
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .result-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .result-title {
            font-size: 1.2rem;
            color: #a8dadc;
        }
        
        .result-value {
            font-size: 3rem;
            font-weight: bold;
            color: #4cc9f0;
            text-shadow: 0 0 15px rgba(76, 201, 240, 0.7);
            font-family: 'Arial Rounded MT Bold', 'Segoe UI', sans-serif;
        }
        
        .result-details {
            display: flex;
            justify-content: space-around;
            font-size: 0.9rem;
            color: #ccc;
        }
        
        .instruction {
            position: absolute;
            bottom: 20px;
            left: 0;
            right: 0;
            text-align: center;
            font-size: 1.1rem;
            background: rgba(0, 0, 0, 0.7);
            padding: 12px 20px;
            border-radius: 50px;
            margin: 0 30px;
            backdrop-filter: blur(5px);
            transition: opacity 0.5s;
            z-index: 100;
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
            color: #90e0ef;
        }
        
        .point {
            position: absolute;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: #f72585;
            border: 3px solid white;
            box-shadow: 0 0 15px rgba(247, 37, 133, 0.7);
            z-index: 20;
            transform: translate(-50%, -50%);
            pointer-events: none; /* 防止点击事件被点标记阻止 */
        }
        
        .point-label {
            position: absolute;
            background: rgba(29, 53, 87, 0.9);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.9rem;
            transform: translate(-50%, 15px);
            z-index: 20;
            font-weight: bold;
            border: 2px solid #4cc9f0;
            pointer-events: none;
        }
        
        .point:nth-child(2) {
            background: #4cc9f0;
            box-shadow: 0 0 15px rgba(76, 201, 240, 0.7);
        }
        
        .point:nth-child(3) {
            background: #90e0ef;
            box-shadow: 0 0 15px rgba(144, 224, 239, 0.7);
        }
        
        .debug-info {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0, 0, 0, 0.7);
            color: #ffaa00;
            padding: 10px;
            border-radius: 10px;
            z-index: 30;
            font-size: 0.8rem;
            max-width: 200px;
            display: none; /* 默认隐藏，需要调试时开启 */
        }
        
        .help-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: rgba(29, 53, 87, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1.2rem;
            color: #4cc9f0;
            cursor: pointer;
            z-index: 40;
            backdrop-filter: blur(5px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.3);
        }
        
        @media (max-width: 768px) {
            .controls {
                grid-template-columns: 1fr;
            }
            
            .result-value {
                font-size: 2.5rem;
            }
            
            h1 {
                font-size: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><i class="fas fa-camera"></i> 相机角度测量仪 - 增强版</h1>
            <div class="status-bar">
                <div id="cameraStatus">相机状态: 初始化中...</div>
                <div id="pointCounter">标记点: 0/3</div>
            </div>
        </header>
        
        <div class="app-container">
            <div class="camera-section">
                <video id="cameraPreview" autoplay playsinline></video>
                <canvas id="overlayCanvas"></canvas>
                
                <div class="camera-placeholder" id="cameraPlaceholder">
                    <i class="fas fa-camera-slash"></i>
                    <h2 id="cameraErrorMsg">正在初始化相机...</h2>
                    <button id="retryCameraBtn" class="btn" style="margin-top:20px; padding:10px 20px;">
                        <i class="fas fa-redo"></i> 重试相机连接
                    </button>
                </div>
                
                <div class="debug-info" id="debugInfo">
                    <!-- 调试信息将在这里显示 -->
                </div>
                
                <div class="instruction" id="instruction">点击"开始测量"按钮开始角度测量</div>
            </div>
            
            <div class="controls">
                <button id="flipBtn">
                    <i class="fas fa-sync-alt"></i>
                    <span>翻转相机</span>
                </button>
                <button id="measureBtn">
                    <i class="fas fa-play-circle"></i>
                    <span>开始测量</span>
                </button>
                <button id="clearBtn">
                    <i class="fas fa-eraser"></i>
                    <span>清除标记</span>
                </button>
            </div>
            
            <div class="result-panel">
                <div class="result-header">
                    <div class="result-title">角度测量结果</div>
                    <div id="angleType">-</div>
                </div>
                <div class="result-value" id="angleValue">0.00°</div>
                <div class="result-details">
                    <div>状态: <span id="measureStatus">等待开始</span></div>
                    <div>版本: v1.2</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 获取DOM元素
        const cameraPreview = document.getElementById('cameraPreview');
        const overlayCanvas = document.getElementById('overlayCanvas');
        const ctx = overlayCanvas.getContext('2d');
        const measureBtn = document.getElementById('measureBtn');
        const clearBtn = document.getElementById('clearBtn');
        const flipBtn = document.getElementById('flipBtn');
        const angleValue = document.getElementById('angleValue');
        const instruction = document.getElementById('instruction');
        const pointCounter = document.getElementById('pointCounter');
        const cameraStatus = document.getElementById('cameraStatus');
        const angleType = document.getElementById('angleType');
        const cameraPlaceholder = document.getElementById('cameraPlaceholder');
        const cameraErrorMsg = document.getElementById('cameraErrorMsg');
        const retryCameraBtn = document.getElementById('retryCameraBtn');
        const measureStatus = document.getElementById('measureStatus');
        const debugInfo = document.getElementById('debugInfo');
        
        // 全局变量
        let points = [];
        let isMeasuring = false;
        let stream = null;
        let usingFrontCamera = false;
        let canvasSizeAdjusted = false;
        
        // 初始化相机
        async function initCamera() {
            cameraStatus.textContent = "相机状态: 启动中...";
            cameraErrorMsg.textContent = "正在初始化相机...";
            cameraPlaceholder.style.display = 'flex';
            
            try {
                // 停止现有的视频流
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
                
                const constraints = {
                    video: { 
                        facingMode: usingFrontCamera ? "user" : "environment",
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    }
                };
                
                stream = await navigator.mediaDevices.getUserMedia(constraints);
                cameraPreview.srcObject = stream;
                
                // 当视频元数据加载后调整画布大小
                cameraPreview.onloadedmetadata = () => {
                    adjustCanvasSize();
                    cameraStatus.textContent = `相机状态: 运行中 (${usingFrontCamera ? '前置' : '后置'})`;
                    cameraStatus.style.color = "#90e0ef";
                    cameraPlaceholder.style.display = 'none';
                };
                
                cameraPreview.onerror = () => {
                    showCameraError("视频流加载错误");
                };
                
                // 监听resize事件
                window.addEventListener('resize', adjustCanvasSize);
                
            } catch (err) {
                console.error("访问相机失败: ", err);
                showCameraError(getErrorMessage(err));
            }
        }
        
        // 调整画布尺寸以匹配视频
        function adjustCanvasSize() {
            if (cameraPreview.videoWidth && cameraPreview.videoHeight) {
                overlayCanvas.width = cameraPreview.videoWidth;
                overlayCanvas.height = cameraPreview.videoHeight;
                canvasSizeAdjusted = true;
                updateDebugInfo();
            }
        }
        
        // 显示相机错误
        function showCameraError(message) {
            cameraStatus.textContent = "相机状态: 错误";
            cameraStatus.style.color = "#f72585";
            cameraErrorMsg.textContent = message;
            cameraPlaceholder.style.display = 'flex';
        }
        
        // 获取友好的错误信息
        function getErrorMessage(error) {
            switch(error.name) {
                case 'NotAllowedError':
                    return "相机访问权限被拒绝。请在浏览器设置中允许相机访问。";
                case 'NotFoundError':
                    return "未找到可用的摄像头设备。";
                case 'NotReadableError':
                    return "摄像头设备已被占用或无法访问。";
                case 'OverconstrainedError':
                    return "无法满足摄像头配置要求。";
                case 'SecurityError':
                    return "安全限制阻止了相机访问。请使用HTTPS协议。";
                case 'TypeError':
                    return "无效的约束参数。";
                default:
                    return "未知错误: " + error.message;
            }
        }
        
        // 开始测量
        function startMeasurement() {
            isMeasuring = true;
            points = [];
            clearOverlay();
            angleValue.textContent = "0.00°";
            angleType.textContent = "-";
            instruction.textContent = "点击屏幕标记第一个点（顶点）";
            instruction.style.opacity = 1;
            measureBtn.innerHTML = '<i class="fas fa-sync-alt"></i><span>重新测量</span>';
            pointCounter.textContent = "标记点: 0/3";
            pointCounter.style.color = "#f72585";
            measureStatus.textContent = "测量中: 标记顶点";
        }
        
        // 清除标记
        function clearMeasurement() {
            isMeasuring = false;
            points = [];
            clearOverlay();
            angleValue.textContent = "0.00°";
            angleType.textContent = "-";
            instruction.textContent = "点击'开始测量'按钮开始";
            measureBtn.innerHTML = '<i class="fas fa-play-circle"></i><span>开始测量</span>';
            pointCounter.textContent = "标记点: 0/3";
            pointCounter.style.color = "#f72585";
            measureStatus.textContent = "等待开始";
        }
        
        // 清除画布
        function clearOverlay() {
            ctx.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);
            document.querySelectorAll('.point, .point-label').forEach(el => el.remove());
        }
        
        // 计算角度
        function calculateAngle() {
            if (points.length < 3) return 0;
            
            const A = points[0];
            const B = points[1]; // 顶点
            const C = points[2];
            
            // 计算向量
            const BA = { x: A.x - B.x, y: A.y - B.y };
            const BC = { x: C.x - B.x, y: C.y - B.y };
            
            // 计算点积
            const dotProduct = BA.x * BC.x + BA.y * BC.y;
            
            // 计算模长
            const magnitudeBA = Math.sqrt(BA.x * BA.x + BA.y * BA.y);
            const magnitudeBC = Math.sqrt(BC.x * BC.x + BC.y * BC.y);
            
            // 计算夹角（弧度）
            const cosTheta = dotProduct / (magnitudeBA * magnitudeBC);
            const angleRad = Math.acos(Math.min(Math.max(cosTheta, -1), 1));
            
            // 转换为角度
            const angleDeg = angleRad * (180 / Math.PI);
            
            // 确定角度类型
            if (angleDeg < 90) {
                angleType.textContent = "锐角";
                angleType.style.color = "#4cc9f0";
            } else if (angleDeg > 90) {
                angleType.textContent = "钝角";
                angleType.style.color = "#f72585";
            } else {
                angleType.textContent = "直角";
                angleType.style.color = "#90e0ef";
            }
            
            return angleDeg;
        }
        
        // 绘制标记
        function drawMarkers() {
            clearOverlay();
            
            // 绘制点
            points.forEach((point, index) => {
                const marker = document.createElement('div');
                marker.className = 'point';
                marker.style.left = `${point.x}px`;
                marker.style.top = `${point.y}px`;
                cameraPreview.parentElement.appendChild(marker);
                
                const label = document.createElement('div');
                label.className = 'point-label';
                label.textContent = ['顶点', '端点1', '端点2'][index];
                label.style.left = `${point.x}px`;
                label.style.top = `${point.y}px`;
                cameraPreview.parentElement.appendChild(label);
            });
            
            // 在画布上绘制线条
            if (points.length >= 2) {
                ctx.beginPath();
                ctx.moveTo(points[0].x, points[0].y);
                ctx.lineTo(points[1].x, points[1].y);
                ctx.strokeStyle = '#4cc9f0';
                ctx.lineWidth = 4;
                ctx.stroke();
            }
            
            if (points.length >= 3) {
                ctx.beginPath();
                ctx.moveTo(points[1].x, points[1].y);
                ctx.lineTo(points[2].x, points[2].y);
                ctx.strokeStyle = '#90e0ef';
                ctx.lineWidth = 4;
                ctx.stroke();
                
                // 计算并显示角度
                const angle = calculateAngle();
                angleValue.textContent = angle.toFixed(2) + "°";
                
                // 绘制弧线
                const center = points[1];
                const radius = Math.min(70, Math.max(30, Math.min(
                    Math.hypot(points[0].x - center.x, points[0].y - center.y),
                    Math.hypot(points[2].x - center.x, points[2].y - center.y)
                ) / 2);
                
                const startAngle = Math.atan2(points[0].y - center.y, points[0].x - center.x);
                const endAngle = Math.atan2(points[2].y - center.y, points[2].x - center.x);
                
                ctx.beginPath();
                ctx.arc(center.x, center.y, radius, startAngle, endAngle);
                ctx.strokeStyle = 'rgba(247, 37, 133, 0.8)';
                ctx.lineWidth = 3;
                ctx.stroke();
                
                // 在弧线中间添加角度值
                const midAngle = (startAngle + endAngle) / 2;
                const textX = center.x + Math.cos(midAngle) * (radius + 25);
                const textY = center.y + Math.sin(midAngle) * (radius + 25);
                
                ctx.font = 'bold 26px Arial';
                ctx.fillStyle = '#4cc9f0';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(angle.toFixed(1) + '°', textX, textY);
            }
        }
        
        // 处理屏幕点击
        function handleCanvasClick(event) {
            if (!isMeasuring) return;
            
            // 确保画布尺寸已调整
            if (!canvasSizeAdjusted) {
                adjustCanvasSize();
            }
            
            const rect = overlayCanvas.getBoundingClientRect();
            const scaleX = overlayCanvas.width / rect.width;
            const scaleY = overlayCanvas.height / rect.height;
            
            const x = (event.clientX - rect.left) * scaleX;
            const y = (event.clientY - rect.top) * scaleY;
            
            points.push({ x, y });
            pointCounter.textContent = `标记点: ${points.length}/3`;
            
            if (points.length === 1) {
                instruction.textContent = "点击屏幕标记第二个点（端点1）";
                pointCounter.style.color = "#ffaa00";
                measureStatus.textContent = "测量中: 标记端点1";
            } else if (points.length === 2) {
                instruction.textContent = "点击屏幕标记第三个点（端点2）";
                pointCounter.style.color = "#ffaa00";
                measureStatus.textContent = "测量中: 标记端点2";
            } else if (points.length === 3) {
                instruction.style.opacity = 0;
                isMeasuring = false;
                pointCounter.textContent = "标记点: 完成";
                pointCounter.style.color = "#4cc9f0";
                measureStatus.textContent = "测量完成";
            }
            
            drawMarkers();
            updateDebugInfo();
        }
        
        // 切换相机
        async function flipCamera() {
            usingFrontCamera = !usingFrontCamera;
            await initCamera();
            clearMeasurement();
        }
        
        // 更新调试信息
        function updateDebugInfo() {
            debugInfo.innerHTML = `
                <div>画布尺寸: ${overlayCanvas.width}×${overlayCanvas.height}</div>
                <div>视频尺寸: ${cameraPreview.videoWidth}×${cameraPreview.videoHeight}</div>
                <div>标记点数: ${points.length}</div>
                <div>测量状态: ${isMeasuring ? '进行中' : '未开始'}</div>
            `;
        }
        
        // 事件监听
        overlayCanvas.addEventListener('click', handleCanvasClick);
        measureBtn.addEventListener('click', () => {
            if (isMeasuring || points.length === 3) {
                clearMeasurement();
            } else {
                startMeasurement();
            }
        });
        clearBtn.addEventListener('click', clearMeasurement);
        flipBtn.addEventListener('click', flipCamera);
        retryCameraBtn.addEventListener('click', initCamera);
        
        // 初始化应用
        window.addEventListener('load', () => {
            initCamera();
            // 显示调试信息（如果需要调试，取消下一行的注释）
            // debugInfo.style.display = 'block';
        });
    </script>
</body>
</html>
